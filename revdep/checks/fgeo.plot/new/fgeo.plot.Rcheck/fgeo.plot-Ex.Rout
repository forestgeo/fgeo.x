
R version 3.5.2 (2018-12-20) -- "Eggshell Igloo"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "fgeo.plot"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> library('fgeo.plot')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("autoplot.fgeo_habitat")
> ### * autoplot.fgeo_habitat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: autoplot.fgeo_habitat
> ### Title: Plot habitats.
> ### Aliases: autoplot.fgeo_habitat
> 
> ### ** Examples
> 
> ## Not run: 
> ##D assert_is_installed("fgeo.x")
> ##D assert_is_installed("fgeo.analyze")
> ##D library(fgeo.analyze)
> ##D 
> ##D habitats <- fgeo_habitat(fgeo.x::elevation, gridsize = 20, n = 4)
> ##D autoplot(habitats)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("autoplot.sp_elev")
> ### * autoplot.sp_elev
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: autoplot.sp_elev
> ### Title: Plot species distribution and/or topography.
> ### Aliases: autoplot.sp_elev autoplot.sp autoplot.elev
> 
> ### ** Examples
> 
> assert_is_installed("fgeo.x")
> 
> # Species ---------------------------------------------------------------
> 
> # Small dataset with a few species for quick examples
> census <- fgeo.x::download_data("luquillo_tree5_random") %>%
+   subset(sp %in% c("PREMON", "CASARB"))
trying URL 'https://github.com/forestgeo/fgeo.data/raw/master/data/luquillo_tree5_random.rda'
Content type 'application/octet-stream' length 29180 bytes (28 KB)
==================================================
downloaded 28 KB

> 
> autoplot(sp(census))
> 
> # Customize
> autoplot(sp(census), point_size = 1)
> 
> # Elevation -------------------------------------------------------------
> 
> elevation <- fgeo.x::elevation
> autoplot(elev(elevation))
> ## Not run: 
> ##D # Same: Works both with the elevation list and dataframe
> ##D autoplot(elev(elevation$col))
> ##D 
> ##D # Customize
> ##D autoplot(elev(elevation), contour_size = 1)
> ## End(Not run)
> 
> # Species and elevation -------------------------------------------------
> 
> autoplot(sp_elev(census, elevation), facet = FALSE, point_size = 1)
> 
> 
> 
> cleanEx()

detaching 'package:bindrcpp'

> nameEx("autoplot_by_species.sp_elev")
> ### * autoplot_by_species.sp_elev
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: autoplot_by_species.sp_elev
> ### Title: List plots of species distribution and topography (good for pdf
> ###   output).
> ### Aliases: autoplot_by_species.sp_elev autoplot_by_species.sp
> 
> ### ** Examples
> 
> assert_is_installed("fgeo.x")
> 
> # Species ---------------------------------------------------------------
> # Small dataset with a few species for quick examples
> census <- fgeo.x::tree6_3species
> 
> # Showing only two species for speed
> autoplot_by_species(sp(census))[1:2]
$CASARB

$PREMON

> ## Not run: 
> ##D # Print all plots in the list
> ##D pdf("map.pdf", paper = "letter", height = 10.5, width = 8)
> ##D autoplot_by_species(sp(census))
> ##D dev.off()
> ## End(Not run)
> 
> # Species and elevation (optional) ---------------------------------------
> # Species only: Same as autoplot_by_species(sp(census))
> autoplot_by_species(sp_elev(census))
$CASARB

$PREMON

$SLOBER

> 
> # Species and elevation
> elevation <- fgeo.x::elevation
> autoplot_by_species(sp_elev(census, elevation))
$CASARB

$PREMON

$SLOBER

> 
> 
> 
> cleanEx()
> nameEx("elev")
> ### * elev
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: elev
> ### Title: Allow autoplotting the column 'elev'.
> ### Aliases: elev
> 
> ### ** Examples
> 
> assert_is_installed("fgeo.x")
> 
> inherits(elev(fgeo.x::elevation), "elev")
[1] TRUE
> inherits(elev(fgeo.x::elevation$col), "elev")
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("header_dbh_bubbles")
> ### * header_dbh_bubbles
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: header_dbh_bubbles
> ### Title: Pre-made headers.
> ### Aliases: header_dbh_bubbles
> ### Keywords: internal
> 
> ### ** Examples
> 
> cat(header_dbh_bubbles())

Names and date:                          Reviewed by:                                 Entered on PC by: 

_________________________    _________________________    _________________________
_________________________    _________________________    _________________________
_________________________    _________________________    _________________________
> 
> 
> 
> cleanEx()
> nameEx("header_tag_status")
> ### * header_tag_status
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: header_tag_status
> ### Title: Pre-made headers.
> ### Aliases: header_tag_status
> ### Keywords: internal
> 
> ### ** Examples
> 
> cat(header_tag_status())

Checking: _______________ Checked date: _______________
Recording: _____________
Measuring: _____________ Measurement date: _____________> 
> 
> 
> cleanEx()
> nameEx("plot_dbh_bubbles_by_quadrat")
> ### * plot_dbh_bubbles_by_quadrat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_dbh_bubbles_by_quadrat
> ### Title: List dbh bubble-plots by quadrat (good for .pdf output).
> ### Aliases: plot_dbh_bubbles_by_quadrat
> 
> ### ** Examples
> 
> assert_is_installed("fgeo.x")
> 
> # Create a small VieFullTable
> first_n <- function(x, n) x %in% sort(unique(x))[1:n]
> small_vft <- fgeo.x::vft_4quad %>%
+   dplyr::filter(first_n(CensusID, 1) & first_n(QuadratID, 2)) %>%
+   dplyr::sample_n(50)
> 
> plot_dbh_bubbles_by_quadrat(small_vft)
* Appending tags of dead trees with the suffix '.d'
* Standarizing `dbh` by the count of `dbh` measurements
$`621`
Warning: Removed 13 rows containing missing values (geom_point).

$`721`
Warning: Removed 17 rows containing missing values (geom_point).

> 
> # Printing all plots to .pdf, with parameters optimized for size letter
> ## Not run: 
> ##D pdf("map.pdf", paper = "letter", height = 10.5, width = 8)
> ##D plot_dbh_bubbles_by_quadrat(small_vft)
> ##D dev.off()
> ## End(Not run)
> 
> # Be careful if subsetting by DBH: You may unintentionally remove dead trees.
> # You should explicietly inlcude missing `DBH` values with `is.na(DBH)`
> include_missing_dbh <- subset(small_vft, DBH > 20 | is.na(DBH))
> plot_dbh_bubbles_by_quadrat(include_missing_dbh)
* Appending tags of dead trees with the suffix '.d'
* Standarizing `dbh` by the count of `dbh` measurements
$`621`
Warning: Removed 13 rows containing missing values (geom_point).

$`721`
Warning: Removed 17 rows containing missing values (geom_point).

> 
> # Customizing the maps ----------------------------------------------------
> # A custom title and header
> myheader <- paste(
+   " ",
+   "Head column 1                     Head column 2                          ",
+   " ",
+   " ........................................................................",
+   " ........................................................................",
+   sep = "\n"
+ )
> 
> plot_dbh_bubbles_by_quadrat(
+   small_vft,
+   title_quad = "My Site, 2018. Quad:",
+   header = myheader
+ )
* Appending tags of dead trees with the suffix '.d'
* Standarizing `dbh` by the count of `dbh` measurements
$`621`
Warning: Removed 13 rows containing missing values (geom_point).

$`721`
Warning: Removed 17 rows containing missing values (geom_point).

> 
> # Tweak the theme with ggplot
> library(ggplot2)
> 
> plot_dbh_bubbles_by_quadrat(
+   small_vft,
+   title_quad = "My Site, 2018. Quad:",
+   header = header_dbh_bubbles("spanish"),
+   tag_size = 3,
+   theme = theme_dbh_bubbles(
+     axis.text = NULL, # NULL shows axis.text; element_blank() doesn't.
+     plot.title = element_text(size = 15),
+     plot.subtitle = element_text(size = 5),
+     panel.background = element_rect(fill = "grey")
+   )
+ )
* Appending tags of dead trees with the suffix '.d'
* Standarizing `dbh` by the count of `dbh` measurements
$`621`
Warning: Removed 13 rows containing missing values (geom_point).

$`721`
Warning: Removed 17 rows containing missing values (geom_point).

> 
> 
> 
> cleanEx()

detaching 'package:ggplot2'

> nameEx("plot_tag_status_by_subquadrat")
> ### * plot_tag_status_by_subquadrat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_tag_status_by_subquadrat
> ### Title: List plots of tree-tag status by subquadrat (good for .pdf
> ###   output).
> ### Aliases: plot_tag_status_by_subquadrat
> 
> ### ** Examples
> 
> assert_is_installed("fgeo.x")
> 
> # Create a small VieFullTable
> first <- function(x) x %in% sort(unique(x))[1]
> small_vft <- subset(fgeo.x::vft_4quad, first(CensusID) & first(QuadratID))
> 
> p <- plot_tag_status_by_subquadrat(small_vft)
> # Showing only two sub-quadtrats
> p[1:2]
$`621_1`

$`621_2`

> 
> # Print all plots to .pdf, with parameters optimized for size letter
> ## Not run: 
> ##D pdf("map.pdf", paper = "letter", height = 10.5, width = 8)
> ##D plot_tag_status_by_subquadrat(small_vft)
> ##D dev.off()
> ## End(Not run)
> 
> # Be careful if filtering by DBH: You may unintentionally remove dead trees.
> # * If you filter by `DBH`, you loose the dead trees becaue their `DBH = NA`
> # * You should explicietly inlcude missing DBH values with `is.na(DBH)`
> include_missing_dbh <- subset(small_vft, DBH > 20 | is.na(DBH))
> p <- plot_tag_status_by_subquadrat(include_missing_dbh)
> # Showing only the first plot to keep the output short
> p[[1]]
> 
> # Customizing the maps ----------------------------------------------------
> # Common tweaks
> p <- plot_tag_status_by_subquadrat(
+   small_vft,
+   show_page = FALSE,
+   show_subquad = FALSE
+ )
> p[[1]]
> 
> p <- plot_tag_status_by_subquadrat(
+   small_vft,
+   title_quad = "BCI 2012. Quadrat: ",
+   bl = "bottom-left", br = "bottom-right", tr = "top-right", tl = "top-left",
+   header = "Line 1: _________\nLine 2:\nLine 3:.....................",
+   subquad_offset = -1,
+   point_size = 3, point_shape = c(17, 6),
+   tag_size = 2,
+   move_edge = 0.5
+ )
> p[[1]]
> 
> # Themes
> library(ggplot2)
> 
> p <- plot_tag_status_by_subquadrat(small_vft, theme = theme_gray())
> p[[1]]
> 
> # Tweaking the default theme of plot_tag_status_by_subquadrat()
> # For many more options see ?ggplot2::theme
> small_tweak <- theme_tag_status(legend.position = "bottom")
> p <- plot_tag_status_by_subquadrat(small_vft, theme = small_tweak)
> p[[1]]
> 
> 
> 
> cleanEx()

detaching 'package:ggplot2'

> nameEx("sp")
> ### * sp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sp
> ### Title: Allow autoplotting the column 'sp'.
> ### Aliases: sp
> 
> ### ** Examples
> 
> assert_is_installed("fgeo.x")
> 
> inherits(sp(fgeo.x::stem5), "sp")
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("sp_elev")
> ### * sp_elev
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sp_elev
> ### Title: Allow autoplotting the columns 'sp' and 'elev'.
> ### Aliases: sp_elev
> 
> ### ** Examples
> 
> assert_is_installed("fgeo.x")
> 
> species_elevation <- sp_elev(fgeo.x::stem5, fgeo.x::elevation)
> inherits(species_elevation, "sp_elev")
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("suffix_match")
> ### * suffix_match
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: suffix_match
> ### Title: Suffix a strings where a vector exactly matches one specific
> ###   string.
> ### Aliases: suffix_match
> ### Keywords: internal
> 
> ### ** Examples
> 
> suffix_match(
+   string = c("one", "banana"),
+   to_match = c("number", "fruit"),
+   .match = "number",
+   suffix = "_num"
+ )
[1] "one_num" "banana" 
> 
> suffix_match(
+   string = c("tag1", "tag2"),
+   to_match = c("dead", "not-dead"),
+   .match = "dead",
+   suffix = ".d"
+ )
[1] "tag1.d" "tag2"  
> 
> vft <- data.frame(
+   Tag = c("01", "02"),
+   Status = c("dead", "alive"),
+   stringsAsFactors = FALSE
+ )
> transform(vft, tagged = suffix_match(Tag, Status, "dead", ".d"))
  Tag Status tagged
1  01   dead   01.d
2  02  alive     02
> 
> 
> 
> cleanEx()
> nameEx("theme_dbh_bubbles")
> ### * theme_dbh_bubbles
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: theme_dbh_bubbles
> ### Title: Theme for 'theme_dbh_bubbles()'.
> ### Aliases: theme_dbh_bubbles
> ### Keywords: internal
> 
> ### ** Examples
> 
> class(theme_dbh_bubbles())
[1] "theme" "gg"   
> 
> 
> 
> cleanEx()
> nameEx("theme_default")
> ### * theme_default
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: theme_default
> ### Title: Default plot theme.
> ### Aliases: theme_default
> ### Keywords: internal
> 
> ### ** Examples
> 
> class(theme_default(ggplot2::ggplot(iris)))
[1] "gg"     "ggplot"
> 
> 
> 
> cleanEx()
> nameEx("theme_tag_status")
> ### * theme_tag_status
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: theme_tag_status
> ### Title: Theme for 'plot_base_census()'.
> ### Aliases: theme_tag_status
> ### Keywords: internal
> 
> ### ** Examples
> 
> class(theme_tag_status())
[1] "theme" "gg"   
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  16.73 0.44 23.9 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
